name: Build KeepKey Vault v5 (macOS Only)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Add permissions for GitHub Actions to create releases
permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            arch: arm64
            name: Apple Silicon
          - target: x86_64-apple-darwin
            arch: x64
            name: Intel
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Log system information
      shell: bash
      run: |
        echo "🍎 Building KeepKey Vault v5 for macOS (${{ matrix.name }})"
        echo "🎯 Target: ${{ matrix.target }}"
        echo "🏃 Runner: macos-latest"
        echo "🔧 Node version: 20"
        echo "🦀 Rust: stable"
        echo "📁 Working directory: $(pwd)"
        echo "💾 Available disk space:"
        df -h
        echo "🧠 Memory info:"
        sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}'
        echo "🖥️ CPU cores:"
        sysctl -n hw.ncpu

    - name: Verify submodules
      shell: bash
      run: |
        echo "📋 Checking submodule status..."
        git submodule status
        echo "📁 Checking device-protocol directory..."
        ls -la device-protocol/ || echo "⚠️ device-protocol directory not found"
        if [ -f "device-protocol/types.proto" ]; then
          echo "✅ types.proto found"
        else
          echo "❌ types.proto NOT found"
          echo "📁 Contents of device-protocol:"
          ls -la device-protocol/ || echo "Directory doesn't exist"
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: ${{ matrix.target }}

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './projects/keepkey-vault/src-tauri -> target'
        cache-on-failure: true

    - name: Install Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install frontend dependencies
      working-directory: ./projects/keepkey-vault
      shell: bash
      run: |
        echo "📁 Current directory: $(pwd)"
        echo "📦 Installing dependencies..."
        bun install

    - name: Check signing credentials
      id: check-signing
      run: |
        echo "🔍 Checking for signing credentials..."
        
        # Check for Apple Developer credentials
        if [ -n "${{ secrets.APPLE_CERTIFICATE }}" ] && [ -n "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" ]; then
          echo "✅ Apple Developer certificate credentials found"
          echo "has_apple_cert=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Apple Developer certificate credentials NOT found"
          echo "has_apple_cert=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for Tauri signing key
        if [ -n "${{ secrets.TAURI_PRIVATE_KEY }}" ]; then
          echo "✅ TAURI_PRIVATE_KEY is set"
          echo "has_tauri_key=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ TAURI_PRIVATE_KEY is NOT set"
          echo "has_tauri_key=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for notarization credentials
        if [ -n "${{ secrets.APPLE_API_ISSUER }}" ] && [ -n "${{ secrets.APPLE_API_KEY }}" ]; then
          echo "✅ Apple API credentials for notarization found"
          echo "has_notarization=true" >> $GITHUB_OUTPUT
        elif [ -n "${{ secrets.APPLE_ID }}" ] && [ -n "${{ secrets.APPLE_PASSWORD }}" ]; then
          echo "✅ Apple ID credentials for notarization found"
          echo "has_notarization=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ No notarization credentials found"
          echo "has_notarization=false" >> $GITHUB_OUTPUT
        fi

    - name: Import Apple Developer Certificate
      if: steps.check-signing.outputs.has_apple_cert == 'true'
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        echo "🔐 Importing Apple Developer Certificate..."
        
        # Decode certificate
        echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
        
        # Create keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # Find and export signing identity
        CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -1)
        if [ -z "$CERT_INFO" ]; then
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Apple Development" | head -1)
        fi
        
        if [ -n "$CERT_INFO" ]; then
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "APPLE_SIGNING_IDENTITY=$CERT_ID" >> $GITHUB_ENV
          echo "✅ Certificate imported successfully: $CERT_ID"
        else
          echo "❌ No valid signing identity found"
          exit 1
        fi

    - name: Build the app
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Apple Developer signing
        APPLE_CERTIFICATE: ${{ steps.check-signing.outputs.has_apple_cert == 'true' && secrets.APPLE_CERTIFICATE || '' }}
        APPLE_CERTIFICATE_PASSWORD: ${{ steps.check-signing.outputs.has_apple_cert == 'true' && secrets.APPLE_CERTIFICATE_PASSWORD || '' }}
        APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY || '' }}
        # Tauri updater signing
        TAURI_SIGNING_PRIVATE_KEY: ${{ steps.check-signing.outputs.has_tauri_key == 'true' && secrets.TAURI_PRIVATE_KEY || '' }}
        TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ steps.check-signing.outputs.has_tauri_key == 'true' && secrets.TAURI_KEY_PASSWORD || '' }}
        # Notarization credentials (API Key method - preferred)
        APPLE_API_ISSUER: ${{ steps.check-signing.outputs.has_notarization == 'true' && secrets.APPLE_API_ISSUER || '' }}
        APPLE_API_KEY: ${{ steps.check-signing.outputs.has_notarization == 'true' && secrets.APPLE_API_KEY || '' }}
        APPLE_API_KEY_PATH: ${{ steps.check-signing.outputs.has_notarization == 'true' && secrets.APPLE_API_KEY_PATH || '' }}
        # Notarization credentials (Apple ID method - fallback)
        APPLE_ID: ${{ steps.check-signing.outputs.has_notarization == 'true' && secrets.APPLE_ID || '' }}
        APPLE_PASSWORD: ${{ steps.check-signing.outputs.has_notarization == 'true' && secrets.APPLE_PASSWORD || '' }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID || '' }}
        # Build settings
        RUST_BACKTRACE: 1
      with:
        projectPath: ./projects/keepkey-vault
        args: --target ${{ matrix.target }}
        tagName: v__VERSION__-${{ matrix.arch }}
        releaseName: 'KeepKey Vault v__VERSION__ (${{ matrix.name }})'
        releaseBody: |
          ## KeepKey Vault v__VERSION__ (${{ matrix.name }})
          
          ### 🍎 macOS Build (${{ matrix.name }})
          - Built for ${{ matrix.name }} Macs
          - Code signed with Apple Developer Certificate
          - Notarized by Apple for security
          - Institutional-grade self-custody solution
          
          ### 🔒 Security Features
          - Hardware wallet integration
          - Multi-signature support
          - Secure key management
          - Enterprise-grade encryption
          
          ### 🛡️ Verification
          This release is signed and notarized by Apple. macOS will verify the signature automatically.
        releaseDraft: true
        prerelease: false
        includeUpdaterJson: false

    - name: Verify signatures and notarization
      shell: bash
      run: |
        echo "🔐 Verifying signatures and notarization..."
        
        # Find the built DMG file
        DMG_FILE=$(find ./projects/keepkey-vault/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/ -name "*.dmg" | head -1)
        
        if [ -f "$DMG_FILE" ]; then
          echo "✅ DMG found: $DMG_FILE"
          echo "📏 File size: $(ls -lh "$DMG_FILE" | awk '{print $5}')"
          
          echo "🔍 Code signature verification:"
          codesign -dv --verbose=4 "$DMG_FILE" 2>&1 | head -10
          
          echo "🔍 Signature validation:"
          codesign --verify --deep --strict "$DMG_FILE" && echo "✅ Signature is valid" || echo "❌ Signature validation failed"
          
          echo "🔍 Notarization status:"
          spctl -a -t open --context context:primary-signature "$DMG_FILE" && echo "✅ Notarization is valid" || echo "⚠️ Notarization check failed (may be expected for non-notarized builds)"
          
          echo "🔍 Gatekeeper assessment:"
          spctl --assess --type execute "$DMG_FILE" && echo "✅ Gatekeeper will allow execution" || echo "⚠️ Gatekeeper assessment failed"
        else
          echo "❌ DMG not found for target ${{ matrix.target }}"
          echo "📁 Contents of bundle directory:"
          find ./projects/keepkey-vault/src-tauri/target/${{ matrix.target }}/release/bundle/ -type f || echo "Bundle directory not found"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: macos-${{ matrix.arch }}-artifacts
        path: |
          projects/keepkey-vault/src-tauri/target/${{ matrix.target }}/release/bundle/
        retention-days: 7

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: macos-${{ matrix.arch }}-build-logs
        path: |
          projects/keepkey-vault/src-tauri/target/${{ matrix.target }}/release/build/
        retention-days: 3 