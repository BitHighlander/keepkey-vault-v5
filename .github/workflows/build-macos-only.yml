name: Build KeepKey Vault v5 (macOS Universal)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Log system information
      shell: bash
      run: |
        echo "🍎 Building KeepKey Vault v5 for macOS (Universal Binary)"
        echo "🎯 Target: universal-apple-darwin"
        echo "🏃 Runner: macos-latest"
        echo "🔧 Node version: 20"
        echo "🦀 Rust: stable"
        echo "📁 Working directory: $(pwd)"
        echo "💾 Available disk space:"
        df -h
        echo "🧠 Memory info:"
        sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}'
        echo "🖥️ CPU cores:"
        sysctl -n hw.ncpu

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: |
          x86_64-apple-darwin
          aarch64-apple-darwin

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './projects/keepkey-vault/src-tauri -> target'
        cache-on-failure: true

    - name: Install Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install frontend dependencies
      working-directory: ./projects/keepkey-vault
      shell: bash
      run: |
        echo "📁 Current directory: $(pwd)"
        echo "📦 Installing dependencies..."
        bun install

    - name: Check signing credentials
      id: check-signing
      run: |
        echo "🔍 Checking for signing credentials..."
        
        # Check for Apple Developer certificate
        if [ -n "${{ secrets.MACOS_CERTIFICATE_BASE64 }}" ]; then
          echo "✅ Apple Developer certificate found"
          echo "has_apple_cert=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Apple Developer certificate NOT found"
          echo "has_apple_cert=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for notarization credentials
        if [ -n "${{ secrets.APPLE_ID }}" ] && [ -n "${{ secrets.APPLE_PASSWORD }}" ] && [ -n "${{ secrets.APPLE_TEAM_ID }}" ]; then
          echo "✅ Apple notarization credentials found"
          echo "has_notarization=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Apple notarization credentials NOT found"
          echo "has_notarization=false" >> $GITHUB_OUTPUT
        fi

    - name: Import Apple Developer Certificate
      if: steps.check-signing.outputs.has_apple_cert == 'true'
      env:
        MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
        MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'temp-keychain-password' }}
      run: |
        echo "🔐 Setting up Apple Developer Certificate..."
        
        # Decode certificate
        echo "$MACOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
        
        # Create keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -lut 21600 build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        
        # Import certificate
        security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        security list-keychain -d user -s build.keychain
        
        # Verify certificate was imported
        security find-identity -v -p codesigning build.keychain
        
        # Clean up certificate file
        rm certificate.p12

    - name: Set up environment variables
      run: |
        echo "🔧 Setting up environment variables..."
        echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
        echo "APPLE_PASSWORD=${{ secrets.APPLE_PASSWORD }}" >> $GITHUB_ENV
        echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV
        echo "CODESIGN_IDENTITY=${{ secrets.CODESIGN_IDENTITY }}" >> $GITHUB_ENV

    - name: Build universal binary
      working-directory: ./projects/keepkey-vault
      run: |
        echo "🔨 Building universal binary..."
        cd ../..
        chmod +x build.sh
        ./build.sh

    - name: Verify build output
      shell: bash
      run: |
        echo "🔍 Verifying build output..."
        
        # Check for app bundle
        APP_PATH="projects/keepkey-vault/target/universal-apple-darwin/release/bundle/macos/KeepKey Vault.app"
        if [ -d "$APP_PATH" ]; then
          echo "✅ App bundle found: $APP_PATH"
          
          # Check universal binary
          echo "🔍 Checking binary architecture:"
          lipo -info "$APP_PATH/Contents/MacOS/vault-v2"
          
          # Check code signing
          echo "🔍 Checking code signature:"
          codesign -vvv --deep --strict "$APP_PATH"
          
          # Check Gatekeeper approval
          echo "🔍 Checking Gatekeeper approval:"
          spctl -a -v "$APP_PATH"
          
        else
          echo "❌ App bundle not found"
          echo "📁 Contents of bundle directory:"
          find projects/keepkey-vault/target/ -name "*.app" 2>/dev/null || echo "No .app found"
        fi
        
        # Check for DMG
        DMG_PATH="projects/keepkey-vault/target/universal-apple-darwin/release/bundle/dmg/KeepKey Vault_0.1.0_universal.dmg"
        if [ -f "$DMG_PATH" ]; then
          echo "✅ DMG found: $DMG_PATH"
          echo "📏 File size: $(ls -lh "$DMG_PATH" | awk '{print $5}')"
          
          # Check DMG notarization
          echo "🔍 Checking DMG notarization:"
          xcrun stapler validate "$DMG_PATH" && echo "✅ DMG is properly stapled" || echo "⚠️ DMG stapling check failed"
          
        else
          echo "❌ DMG not found"
          echo "📁 Contents of dmg directory:"
          find projects/keepkey-vault/target/ -name "*.dmg" 2>/dev/null || echo "No .dmg found"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: macos-universal-build
        path: |
          projects/keepkey-vault/target/universal-apple-darwin/release/bundle/
        retention-days: 7

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/master' && steps.check-signing.outputs.has_apple_cert == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v0.1.0-${{ github.run_number }}
        name: KeepKey Vault v0.1.0 Build ${{ github.run_number }}
        body: |
          ## KeepKey Vault v0.1.0 - Universal macOS Build
          
          ### 🍎 macOS Universal Binary
          - ✅ Supports both Intel and Apple Silicon Macs
          - ✅ Code signed with Apple Developer Certificate
          - ✅ Notarized by Apple for security
          - ✅ No "can't be opened" errors
          - ✅ Clean installation from DMG
          
          ### 🔒 Security Features
          - Hardware wallet integration
          - Multi-signature support
          - Secure key management
          - Enterprise-grade encryption
          
          ### 🛡️ Installation
          1. Download the DMG file below
          2. Mount the DMG
          3. Drag KeepKey Vault to Applications
          4. Launch immediately - no security warnings!
          
          ### 🔍 Verification
          This release is signed and notarized by Apple. macOS will verify the signature automatically.
        files: |
          projects/keepkey-vault/target/universal-apple-darwin/release/bundle/dmg/*.dmg
        draft: false
        prerelease: false

    - name: Upload build logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: macos-build-logs
        path: |
          projects/keepkey-vault/target/universal-apple-darwin/release/build/
        retention-days: 3 