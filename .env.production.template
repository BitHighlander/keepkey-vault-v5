# GitHub Actions Environment Variables for macOS Code Signing
# This file documents what secrets need to be configured in GitHub repository settings

# =============================================================================
# REQUIRED GITHUB SECRETS
# =============================================================================
# Go to: https://github.com/your-repo/settings/secrets/actions
# Add these as "Repository secrets"

# Apple Developer Account
APPLE_ID=bithighlander@gmail.com
APPLE_PASSWORD=your-app-specific-password-here
APPLE_TEAM_ID=DR57X8Z394

# Code Signing Identity (must match certificate)
CODESIGN_IDENTITY="Developer ID Application: Matt Hollander (DR57X8Z394)"

# =============================================================================
# CERTIFICATE FILES NEEDED IN GITHUB ACTIONS
# =============================================================================
# These need to be base64 encoded and stored as secrets

# Main certificate file (base64 encoded)
MACOS_CERTIFICATE_BASE64=<base64-encoded-p12-certificate>

# Certificate password (if P12 is password protected)
MACOS_CERTIFICATE_PASSWORD=your-certificate-password

# =============================================================================
# KEYCHAIN SETUP (for GitHub Actions runner)
# =============================================================================
# These are used by the GitHub Action to set up temporary keychain

KEYCHAIN_PASSWORD=temp-keychain-password-for-ci
KEYCHAIN_NAME=build.keychain

# =============================================================================
# INSTRUCTIONS FOR GITHUB ACTIONS SETUP
# =============================================================================

# 1. ENCODE CERTIFICATE TO BASE64
# Run this command locally to encode your certificate:
# base64 -i certs/keepkey-developer-id-application-combined-nopass.p12 | pbcopy
# Then paste the result as MACOS_CERTIFICATE_BASE64 secret

# 2. APP-SPECIFIC PASSWORD
# Generate at: https://appleid.apple.com/account/manage
# Section: "App-Specific Passwords"
# Use this as APPLE_PASSWORD secret

# 3. VERIFY CERTIFICATE IDENTITY
# Run locally to get exact identity string:
# security find-identity -v -p codesigning | grep "KeepKey"
# Use the full string in quotes as CODESIGN_IDENTITY

# =============================================================================
# GITHUB ACTIONS WORKFLOW INTEGRATION
# =============================================================================
# The workflow will:
# 1. Decode base64 certificate to file
# 2. Create temporary keychain
# 3. Import certificate to keychain
# 4. Set up environment variables
# 5. Run build with code signing
# 6. Clean up keychain

# Example workflow step:
# - name: Import Code Signing Certificate
#   env:
#     MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
#     MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
#   run: |
#     echo "$MACOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
#     security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
#     security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
#     security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
#     security import certificate.p12 -k "$KEYCHAIN_NAME" -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
#     security list-keychain -d user -s "$KEYCHAIN_NAME"

# =============================================================================
# SECURITY NOTES
# =============================================================================
# - Never commit this file with real values
# - Use GitHub repository secrets for all sensitive data
# - Rotate app-specific passwords regularly
# - Monitor certificate expiration dates
# - Use separate certificates for different environments if needed

# =============================================================================
# TESTING GITHUB ACTIONS LOCALLY
# =============================================================================
# Use 'act' to test GitHub Actions locally:
# brew install act
# act -s APPLE_ID=your-id -s APPLE_PASSWORD=your-password -s APPLE_TEAM_ID=your-team

# =============================================================================
# TROUBLESHOOTING
# =============================================================================
# Common issues and solutions:

# Issue: "No identity found"
# Solution: Verify MACOS_CERTIFICATE_BASE64 is correct and MACOS_CERTIFICATE_PASSWORD matches

# Issue: "The specified item could not be found in the keychain"
# Solution: Check keychain setup and certificate import steps

# Issue: "User interaction is not allowed"
# Solution: Ensure keychain is unlocked and codesign has access

# Issue: "Notarization failed"
# Solution: Verify APPLE_ID, APPLE_PASSWORD, and APPLE_TEAM_ID are correct
